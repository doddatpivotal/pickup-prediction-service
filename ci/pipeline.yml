---
resources:
  - name: code-repo
    type: git
    source:
      uri: ((code-repo-uri))
      branch: ((code-repo-branch))
      ignore_paths:
        - "ci"
        - "docs"
      private_key: ((code-repo-private-key))

  - name: code-repo-release
    type: github-release
    source:
      owner: ((code-repo-owner))
      repository: ((code-repo-repository))
      access_token: ((code-repo-access-token))

  - name: ci-scripts
    type: git
    source:
      uri: ((code-repo-uri))
      branch: ((code-repo-branch))
      paths: ["ci"]
      private_key: ((code-repo-private-key))

  - name: version
    type: semver
    source:
      initial_version: 1.0.0-rc.0
      driver: git
      uri: ((version-repo-uri))
      branch: ((version-repo-branch))
      file: version
      private_key: ((code-repo-private-key))

  - name: cf-test
    type: cf
    source:
      api: ((cf-test-api))
      username: ((cf-test-username))
      password: ((cf-test-password))
      organization: ((cf-test-org))
      space: ((cf-test-space))

  - name: cf-prod
    type: cf
    source:
      api: ((cf-prod-api))
      username: ((cf-prod-username))
      password: ((cf-prod-password))
      organization: ((cf-prod-org))
      space: ((cf-prod-space))

jobs:
  - name: unit-test
    plan:
      - get: code-repo
        trigger: true
      - get: ci-scripts
      - task: unit-test
        file: ci-scripts/ci/tasks/unit-test.yml

  - name: build-and-publish
    serial: true
    plan:
      - get: code-repo
        passed: [ unit-test ]
        trigger: true
      - get: ci-scripts
      - get: version
        params: { pre: rc }
      - task: build-and-publish
        file: ci-scripts/ci/tasks/build-and-publish.yml
        params:
          REPO_WITH_BINARIES_FOR_UPLOAD: ((repo-with-binaries-for-upload))
          M2_SETTINGS_REPO_ID: ((m2-settings-repo-id))
          M2_SETTINGS_REPO_USERNAME: ((m2-settings-repo-username))
          M2_SETTINGS_REPO_PASSWORD: ((m2-settings-repo-password))
      - put: version
        params: { file: version/version }
      - put: code-repo-tag
        resource: code-repo
        params:
          repository: code-repo
          tag: results/tag.txt
          only_tag: true

  - name: deploy-to-test
    serial: true
    plan:
      - get: code-repo
        trigger: true
        passed: [ build-and-publish ]
      - get: ci-scripts
      - get: version
      - task: prepare-cf-push
        file: ci-scripts/ci/tasks/prepare-cf-push.yml
        params:
          GROUP_ID: ((code-repo-group-id))
          ARTIFACT_ID: ((code-repo-artifact-id))
          ROUTE: ((cf-test-route))
          ARTIFACTORY_URL: ((repo-with-binaries-for-upload))
          DEPLOY_TARGET_LABEL: test
      - put: cf-test
        params:
          manifest: deployment/manifest.yml
      - put: code-repo-tag
        resource: code-repo
        params:
          repository: code-repo
          tag: deployment/tag.txt
          only_tag: true

  - name: mark-as-release
    serial: true
    plan:
      - get: code-repo
        passed: [ deploy-to-test ]
      - get: ci-scripts
      - get: version
        params: { bump: final }
      - task: prepare-release
        file: ci-scripts/ci/tasks/prepare-release.yml
      - task: build-and-publish
        file: ci-scripts/ci/tasks/build-and-publish.yml
        params:
          REPO_WITH_BINARIES_FOR_UPLOAD: ((repo-with-binaries-for-upload))
          M2_SETTINGS_REPO_ID: ((m2-settings-repo-id))
          M2_SETTINGS_REPO_USERNAME: ((m2-settings-repo-username))
          M2_SETTINGS_REPO_PASSWORD: ((m2-settings-repo-password))
      - put: version
        params: { file: version/version }
      - put: code-repo-tag
        resource: code-repo
        params:
          repository: code-repo
          tag: results/tag.txt
          only_tag: true
      - put: code-repo-release
        params:
          name: release-results/release-name.txt
          tag: results/tag.txt
          globs:
            - release-results/code-repo-*.tgz

  - name: bump-patch-version
    serial: true
    plan:
      - get: version
        passed: [ mark-as-release ]
        trigger: true
      - put: version
        params: { bump: patch, pre: rc }

  - name: deploy-to-prod
    serial: true
    plan:
      - get: code-repo
        passed: [ mark-as-release ]
      - get: ci-scripts
      - get: version
        passed: [ mark-as-release ]
      - task: prepare-cf-push
        file: ci-scripts/ci/tasks/prepare-cf-push.yml
        params:
          GROUP_ID: ((code-repo-group-id))
          ARTIFACT_ID: ((code-repo-artifact-id))
          ROUTE: ((cf-prod-route))
          ARTIFACTORY_URL: ((repo-with-binaries-for-upload))
          DEPLOY_TARGET_LABEL: prod
      - put: cf-prod
        params:
          manifest: deployment/manifest.yml
      - put: code-repo-tag
        resource: code-repo
        params:
          repository: code-repo
          tag: deployment/tag.txt
          only_tag: true

  - name: deploy-release-to-test
    serial: true
    plan:
      - get: code-repo
        passed: [ mark-as-release ]
      - get: ci-scripts
      - get: version
        passed: [ mark-as-release ]
      - task: prepare-cf-push
        file: ci-scripts/ci/tasks/prepare-cf-push.yml
        params:
          GROUP_ID: ((code-repo-group-id))
          ARTIFACT_ID: ((code-repo-artifact-id))
          ROUTE: ((cf-test-route))
          ARTIFACTORY_URL: ((repo-with-binaries-for-upload))
          DEPLOY_TARGET_LABEL: test
      - put: cf-test
        params:
          manifest: deployment/manifest.yml
      - put: code-repo-tag
        resource: code-repo
        params:
          repository: code-repo
          tag: deployment/tag.txt
          only_tag: true

  - name: bump-major-version
    serial: true
    plan:
      - put: version
        params: { bump: major, pre: rc }

  - name: bump-minor-version
    serial: true
    plan:
      - put: version
        params: { bump: minor, pre: rc }
